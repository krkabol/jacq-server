<?php

namespace Nettrine\Proxy\__CG__\app\Model\Database\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Photos extends \app\Model\Database\Entity\Photos implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'archiveFilename', 'jp2Filename', 'herbarium', 'specimenId', 'width', 'height', 'archiveFileSize', 'JP2FileSize', 'finalized', 'id', 'createdAt'];
        }

        return ['__isInitialized__', 'archiveFilename', 'jp2Filename', 'herbarium', 'specimenId', 'width', 'height', 'archiveFileSize', 'JP2FileSize', 'finalized', 'id', 'createdAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Photos $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(?\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(?\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getArchiveFilename(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArchiveFilename', []);

        return parent::getArchiveFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function setArchiveFilename(string $archiveFilename): \app\Model\Database\Entity\Photos
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArchiveFilename', [$archiveFilename]);

        return parent::setArchiveFilename($archiveFilename);
    }

    /**
     * {@inheritDoc}
     */
    public function getJp2Filename(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJp2Filename', []);

        return parent::getJp2Filename();
    }

    /**
     * {@inheritDoc}
     */
    public function setJp2Filename(string $jp2Filename): \app\Model\Database\Entity\Photos
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJp2Filename', [$jp2Filename]);

        return parent::setJp2Filename($jp2Filename);
    }

    /**
     * {@inheritDoc}
     */
    public function getHerbarium(): \app\Model\Database\Entity\Herbaria
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHerbarium', []);

        return parent::getHerbarium();
    }

    /**
     * {@inheritDoc}
     */
    public function setHerbarium(\app\Model\Database\Entity\Herbaria $herbarium): \app\Model\Database\Entity\Photos
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHerbarium', [$herbarium]);

        return parent::setHerbarium($herbarium);
    }

    /**
     * {@inheritDoc}
     */
    public function getWidth(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWidth', []);

        return parent::getWidth();
    }

    /**
     * {@inheritDoc}
     */
    public function setWidth(?int $width): \app\Model\Database\Entity\Photos
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWidth', [$width]);

        return parent::setWidth($width);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeight(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeight', []);

        return parent::getHeight();
    }

    /**
     * {@inheritDoc}
     */
    public function setHeight(?int $height): \app\Model\Database\Entity\Photos
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeight', [$height]);

        return parent::setHeight($height);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpecimenId(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpecimenId', []);

        return parent::getSpecimenId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpecimenId(?string $specimenId): \app\Model\Database\Entity\Photos
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpecimenId', [$specimenId]);

        return parent::setSpecimenId($specimenId);
    }

    /**
     * {@inheritDoc}
     */
    public function getArchiveFileSize(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArchiveFileSize', []);

        return parent::getArchiveFileSize();
    }

    /**
     * {@inheritDoc}
     */
    public function setArchiveFileSize(?int $archiveFileSize): \app\Model\Database\Entity\Photos
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArchiveFileSize', [$archiveFileSize]);

        return parent::setArchiveFileSize($archiveFileSize);
    }

    /**
     * {@inheritDoc}
     */
    public function getJP2FileSize(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJP2FileSize', []);

        return parent::getJP2FileSize();
    }

    /**
     * {@inheritDoc}
     */
    public function setJP2FileSize(?int $JP2FileSize): \app\Model\Database\Entity\Photos
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJP2FileSize', [$JP2FileSize]);

        return parent::setJP2FileSize($JP2FileSize);
    }

    /**
     * {@inheritDoc}
     */
    public function isFinalized(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFinalized', []);

        return parent::isFinalized();
    }

    /**
     * {@inheritDoc}
     */
    public function setFinalized(bool $finalized): \app\Model\Database\Entity\Photos
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFinalized', [$finalized]);

        return parent::setFinalized($finalized);
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', []);

        return parent::setCreatedAt();
    }

}
